// <auto-generated />
using System;
using Comp7071_A2.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Comp7071_A2.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250227211028_InitialCreate3")]
    partial class InitialCreate3
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.2");

            modelBuilder.Entity("CertificationEmployee", b =>
                {
                    b.Property<Guid>("CertificationsId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EmployeesId")
                        .HasColumnType("TEXT");

                    b.HasKey("CertificationsId", "EmployeesId");

                    b.HasIndex("EmployeesId");

                    b.ToTable("CertificationEmployee");
                });

            modelBuilder.Entity("CertificationService", b =>
                {
                    b.Property<Guid>("CertificationsId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ServicesId")
                        .HasColumnType("TEXT");

                    b.HasKey("CertificationsId", "ServicesId");

                    b.HasIndex("ServicesId");

                    b.ToTable("ServiceCertification", (string)null);
                });

            modelBuilder.Entity("Comp7071_A2.Areas.Housing.Models.Application", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("AssetID")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("RenterID")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.HasIndex("AssetID");

                    b.HasIndex("RenterID");

                    b.ToTable("Application");
                });

            modelBuilder.Entity("Comp7071_A2.Areas.Housing.Models.ApplicationReference", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ApplicationID")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ContactID")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("ApplicationID");

                    b.HasIndex("ContactID");

                    b.ToTable("ApplicationReference");
                });

            modelBuilder.Entity("Comp7071_A2.Areas.Housing.Models.Asset", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("BuildingID")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("HousingGroupID")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("RentAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("RenterID")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("BuildingID");

                    b.HasIndex("HousingGroupID");

                    b.HasIndex("RenterID");

                    b.ToTable("Assets");
                });

            modelBuilder.Entity("Comp7071_A2.Areas.Housing.Models.Building", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("HousingGroupID")
                        .HasColumnType("TEXT");

                    b.Property<int>("NumLockers")
                        .HasColumnType("INTEGER");

                    b.Property<int>("NumParking")
                        .HasColumnType("INTEGER");

                    b.Property<int>("NumUnits")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.HasIndex("HousingGroupID");

                    b.ToTable("Buildings");
                });

            modelBuilder.Entity("Comp7071_A2.Areas.Housing.Models.Contact", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("RenterID")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("RenterID");

                    b.ToTable("Contact");
                });

            modelBuilder.Entity("Comp7071_A2.Areas.Housing.Models.HousingGroup", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("ManagerID")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("ManagerID");

                    b.ToTable("HousingGroups");
                });

            modelBuilder.Entity("Comp7071_A2.Areas.Housing.Models.Locker", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("AssetID")
                        .HasColumnType("TEXT");

                    b.Property<int>("LockerNumber")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LockerSize")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("SuiteID")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("AssetID")
                        .IsUnique();

                    b.ToTable("Lockers");
                });

            modelBuilder.Entity("Comp7071_A2.Areas.Housing.Models.ParkingSpot", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("AssetID")
                        .HasColumnType("TEXT");

                    b.Property<int>("SpotNumber")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("SuiteID")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("VehicleID")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("AssetID")
                        .IsUnique();

                    b.ToTable("ParkingSpots");
                });

            modelBuilder.Entity("Comp7071_A2.Areas.Housing.Models.Renter", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ApplicationID")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("AssetID")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("Photo")
                        .HasColumnType("BLOB");

                    b.HasKey("ID");

                    b.HasIndex("ApplicationID")
                        .IsUnique();

                    b.HasIndex("AssetID")
                        .IsUnique();

                    b.ToTable("Renters");
                });

            modelBuilder.Entity("Comp7071_A2.Areas.Housing.Models.Suite", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("AssetID")
                        .HasColumnType("TEXT");

                    b.Property<int>("Bathrooms")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Floor")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("LockerID")
                        .HasColumnType("TEXT");

                    b.Property<int>("Occupants")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("ParkingSpotID")
                        .HasColumnType("TEXT");

                    b.Property<int>("Rooms")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UnitNumber")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.HasIndex("AssetID")
                        .IsUnique();

                    b.HasIndex("LockerID")
                        .IsUnique();

                    b.HasIndex("ParkingSpotID")
                        .IsUnique();

                    b.ToTable("Suites");
                });

            modelBuilder.Entity("Comp7071_A2.Areas.Housing.Models.Vehicle", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("LicensePlate")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ParkingSpotID")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("RenterID")
                        .HasColumnType("TEXT");

                    b.Property<string>("VehicleType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("ParkingSpotID")
                        .IsUnique();

                    b.ToTable("Vehicles");
                });

            modelBuilder.Entity("Comp7071_A2.Areas.ManageCare.Models.Certification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Certification");
                });

            modelBuilder.Entity("Comp7071_A2.Areas.ManageCare.Models.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Comp7071_A2.Areas.ManageCare.Models.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("EmergencyContactPhone")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("JobTitle")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ManagerId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ManagerId");

                    b.ToTable("Employees");

                    b.HasDiscriminator<string>("JobTitle").HasValue("Peasent");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Comp7071_A2.Areas.ManageCare.Models.Invoice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("Comp7071_A2.Areas.ManageCare.Models.InvoiceLine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Amount")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("InvoiceId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceId");

                    b.ToTable("InvoiceLines");
                });

            modelBuilder.Entity("Comp7071_A2.Areas.ManageCare.Models.Schedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ServiceId");

                    b.ToTable("Schedule");
                });

            modelBuilder.Entity("Comp7071_A2.Areas.ManageCare.Models.Service", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("Comp7071_A2.Areas.ManageHumanResourcesAndPayroll.Models.HREmployee", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Adderess")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Emergency_Contact")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Employment_Type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Job_Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("HREmployees");
                });

            modelBuilder.Entity("Comp7071_A2.Areas.ManageHumanResourcesAndPayroll.Models.HRSchedule", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("End_Date")
                        .HasColumnType("TEXT");

                    b.Property<float>("Hours_Scheduled")
                        .HasColumnType("REAL");

                    b.Property<int>("Recurrance")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Start_Date")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.ToTable("HRSchedules");
                });

            modelBuilder.Entity("Comp7071_A2.Areas.ManageHumanResourcesAndPayroll.Models.PayPeriod", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("End_Date")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("HREmployeeID")
                        .HasColumnType("TEXT");

                    b.Property<float>("Rate")
                        .HasColumnType("REAL");

                    b.Property<DateTime>("Start_Date")
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.HasIndex("HREmployeeID");

                    b.ToTable("PayPeriods");
                });

            modelBuilder.Entity("Comp7071_A2.Areas.ManageHumanResourcesAndPayroll.Models.Shift", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("HRScheduleID")
                        .HasColumnType("TEXT");

                    b.Property<float>("Hours_Worked")
                        .HasColumnType("REAL");

                    b.Property<DateTime>("Start_Time")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.HasIndex("HRScheduleID");

                    b.ToTable("Shifts");
                });

            modelBuilder.Entity("CustomerSchedule", b =>
                {
                    b.Property<Guid>("CustomersId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("SchedulesId")
                        .HasColumnType("TEXT");

                    b.HasKey("CustomersId", "SchedulesId");

                    b.HasIndex("SchedulesId");

                    b.ToTable("CustomerSchedule", (string)null);
                });

            modelBuilder.Entity("EmployeeSchedule", b =>
                {
                    b.Property<Guid>("EmployeesId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ScheduleId")
                        .HasColumnType("TEXT");

                    b.HasKey("EmployeesId", "ScheduleId");

                    b.HasIndex("ScheduleId");

                    b.ToTable("EmployeeSchedule", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "b5f0c6a4-45d7-4e18-94df-bc3b0e69c456",
                            Name = "HousingAdmin"
                        },
                        new
                        {
                            Id = "6a4d3c5f-95df-4e18-bc3b-0e69c457c6a4",
                            Name = "User"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Comp7071_A2.Areas.ManageCare.Models.Manager", b =>
                {
                    b.HasBaseType("Comp7071_A2.Areas.ManageCare.Models.Employee");

                    b.Property<string>("Department")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasDiscriminator().HasValue("Noble");
                });

            modelBuilder.Entity("CertificationEmployee", b =>
                {
                    b.HasOne("Comp7071_A2.Areas.ManageCare.Models.Certification", null)
                        .WithMany()
                        .HasForeignKey("CertificationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Comp7071_A2.Areas.ManageCare.Models.Employee", null)
                        .WithMany()
                        .HasForeignKey("EmployeesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CertificationService", b =>
                {
                    b.HasOne("Comp7071_A2.Areas.ManageCare.Models.Certification", null)
                        .WithMany()
                        .HasForeignKey("CertificationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Comp7071_A2.Areas.ManageCare.Models.Service", null)
                        .WithMany()
                        .HasForeignKey("ServicesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Comp7071_A2.Areas.Housing.Models.Application", b =>
                {
                    b.HasOne("Comp7071_A2.Areas.Housing.Models.Asset", "Asset")
                        .WithMany()
                        .HasForeignKey("AssetID");

                    b.HasOne("Comp7071_A2.Areas.Housing.Models.Renter", "Renter")
                        .WithMany()
                        .HasForeignKey("RenterID");

                    b.Navigation("Asset");

                    b.Navigation("Renter");
                });

            modelBuilder.Entity("Comp7071_A2.Areas.Housing.Models.ApplicationReference", b =>
                {
                    b.HasOne("Comp7071_A2.Areas.Housing.Models.Application", "Application")
                        .WithMany("ApplicationReferences")
                        .HasForeignKey("ApplicationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Comp7071_A2.Areas.Housing.Models.Contact", "Contact")
                        .WithMany("ApplicationReferences")
                        .HasForeignKey("ContactID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Contact");
                });

            modelBuilder.Entity("Comp7071_A2.Areas.Housing.Models.Asset", b =>
                {
                    b.HasOne("Comp7071_A2.Areas.Housing.Models.Building", "Building")
                        .WithMany()
                        .HasForeignKey("BuildingID");

                    b.HasOne("Comp7071_A2.Areas.Housing.Models.HousingGroup", "HousingGroup")
                        .WithMany()
                        .HasForeignKey("HousingGroupID");

                    b.HasOne("Comp7071_A2.Areas.Housing.Models.Renter", "Renter")
                        .WithMany()
                        .HasForeignKey("RenterID");

                    b.Navigation("Building");

                    b.Navigation("HousingGroup");

                    b.Navigation("Renter");
                });

            modelBuilder.Entity("Comp7071_A2.Areas.Housing.Models.Building", b =>
                {
                    b.HasOne("Comp7071_A2.Areas.Housing.Models.HousingGroup", "HousingGroup")
                        .WithMany()
                        .HasForeignKey("HousingGroupID");

                    b.Navigation("HousingGroup");
                });

            modelBuilder.Entity("Comp7071_A2.Areas.Housing.Models.Contact", b =>
                {
                    b.HasOne("Comp7071_A2.Areas.Housing.Models.Renter", "Renter")
                        .WithMany()
                        .HasForeignKey("RenterID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Renter");
                });

            modelBuilder.Entity("Comp7071_A2.Areas.Housing.Models.HousingGroup", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "Manager")
                        .WithMany()
                        .HasForeignKey("ManagerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("Comp7071_A2.Areas.Housing.Models.Locker", b =>
                {
                    b.HasOne("Comp7071_A2.Areas.Housing.Models.Asset", "Asset")
                        .WithOne()
                        .HasForeignKey("Comp7071_A2.Areas.Housing.Models.Locker", "AssetID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Asset");
                });

            modelBuilder.Entity("Comp7071_A2.Areas.Housing.Models.ParkingSpot", b =>
                {
                    b.HasOne("Comp7071_A2.Areas.Housing.Models.Asset", "Asset")
                        .WithOne()
                        .HasForeignKey("Comp7071_A2.Areas.Housing.Models.ParkingSpot", "AssetID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Asset");
                });

            modelBuilder.Entity("Comp7071_A2.Areas.Housing.Models.Renter", b =>
                {
                    b.HasOne("Comp7071_A2.Areas.Housing.Models.Application", "Application")
                        .WithOne()
                        .HasForeignKey("Comp7071_A2.Areas.Housing.Models.Renter", "ApplicationID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Comp7071_A2.Areas.Housing.Models.Asset", "Asset")
                        .WithOne()
                        .HasForeignKey("Comp7071_A2.Areas.Housing.Models.Renter", "AssetID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Application");

                    b.Navigation("Asset");
                });

            modelBuilder.Entity("Comp7071_A2.Areas.Housing.Models.Suite", b =>
                {
                    b.HasOne("Comp7071_A2.Areas.Housing.Models.Asset", "Asset")
                        .WithOne()
                        .HasForeignKey("Comp7071_A2.Areas.Housing.Models.Suite", "AssetID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Comp7071_A2.Areas.Housing.Models.Locker", "Locker")
                        .WithOne("Suite")
                        .HasForeignKey("Comp7071_A2.Areas.Housing.Models.Suite", "LockerID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Comp7071_A2.Areas.Housing.Models.ParkingSpot", "ParkingSpot")
                        .WithOne("Suite")
                        .HasForeignKey("Comp7071_A2.Areas.Housing.Models.Suite", "ParkingSpotID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Asset");

                    b.Navigation("Locker");

                    b.Navigation("ParkingSpot");
                });

            modelBuilder.Entity("Comp7071_A2.Areas.Housing.Models.Vehicle", b =>
                {
                    b.HasOne("Comp7071_A2.Areas.Housing.Models.ParkingSpot", "ParkingSpot")
                        .WithOne("Vehicle")
                        .HasForeignKey("Comp7071_A2.Areas.Housing.Models.Vehicle", "ParkingSpotID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ParkingSpot");
                });

            modelBuilder.Entity("Comp7071_A2.Areas.ManageCare.Models.Employee", b =>
                {
                    b.HasOne("Comp7071_A2.Areas.ManageCare.Models.Manager", null)
                        .WithMany("Employees")
                        .HasForeignKey("ManagerId");
                });

            modelBuilder.Entity("Comp7071_A2.Areas.ManageCare.Models.Invoice", b =>
                {
                    b.HasOne("Comp7071_A2.Areas.ManageCare.Models.Customer", "Customer")
                        .WithMany("Invoices")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Comp7071_A2.Areas.ManageCare.Models.InvoiceLine", b =>
                {
                    b.HasOne("Comp7071_A2.Areas.ManageCare.Models.Invoice", "Invoice")
                        .WithMany("Lines")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Invoice");
                });

            modelBuilder.Entity("Comp7071_A2.Areas.ManageCare.Models.Schedule", b =>
                {
                    b.HasOne("Comp7071_A2.Areas.ManageCare.Models.Service", "Service")
                        .WithMany("Schedule")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Service");
                });

            modelBuilder.Entity("Comp7071_A2.Areas.ManageHumanResourcesAndPayroll.Models.PayPeriod", b =>
                {
                    b.HasOne("Comp7071_A2.Areas.ManageHumanResourcesAndPayroll.Models.HREmployee", null)
                        .WithMany("Pay_History")
                        .HasForeignKey("HREmployeeID");
                });

            modelBuilder.Entity("Comp7071_A2.Areas.ManageHumanResourcesAndPayroll.Models.Shift", b =>
                {
                    b.HasOne("Comp7071_A2.Areas.ManageHumanResourcesAndPayroll.Models.HRSchedule", null)
                        .WithMany("Shifts")
                        .HasForeignKey("HRScheduleID");
                });

            modelBuilder.Entity("CustomerSchedule", b =>
                {
                    b.HasOne("Comp7071_A2.Areas.ManageCare.Models.Customer", null)
                        .WithMany()
                        .HasForeignKey("CustomersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Comp7071_A2.Areas.ManageCare.Models.Schedule", null)
                        .WithMany()
                        .HasForeignKey("SchedulesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EmployeeSchedule", b =>
                {
                    b.HasOne("Comp7071_A2.Areas.ManageCare.Models.Employee", null)
                        .WithMany()
                        .HasForeignKey("EmployeesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Comp7071_A2.Areas.ManageCare.Models.Schedule", null)
                        .WithMany()
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Comp7071_A2.Areas.Housing.Models.Application", b =>
                {
                    b.Navigation("ApplicationReferences");
                });

            modelBuilder.Entity("Comp7071_A2.Areas.Housing.Models.Contact", b =>
                {
                    b.Navigation("ApplicationReferences");
                });

            modelBuilder.Entity("Comp7071_A2.Areas.Housing.Models.Locker", b =>
                {
                    b.Navigation("Suite");
                });

            modelBuilder.Entity("Comp7071_A2.Areas.Housing.Models.ParkingSpot", b =>
                {
                    b.Navigation("Suite");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("Comp7071_A2.Areas.ManageCare.Models.Customer", b =>
                {
                    b.Navigation("Invoices");
                });

            modelBuilder.Entity("Comp7071_A2.Areas.ManageCare.Models.Invoice", b =>
                {
                    b.Navigation("Lines");
                });

            modelBuilder.Entity("Comp7071_A2.Areas.ManageCare.Models.Service", b =>
                {
                    b.Navigation("Schedule");
                });

            modelBuilder.Entity("Comp7071_A2.Areas.ManageHumanResourcesAndPayroll.Models.HREmployee", b =>
                {
                    b.Navigation("Pay_History");
                });

            modelBuilder.Entity("Comp7071_A2.Areas.ManageHumanResourcesAndPayroll.Models.HRSchedule", b =>
                {
                    b.Navigation("Shifts");
                });

            modelBuilder.Entity("Comp7071_A2.Areas.ManageCare.Models.Manager", b =>
                {
                    b.Navigation("Employees");
                });
#pragma warning restore 612, 618
        }
    }
}
